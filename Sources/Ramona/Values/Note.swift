import Foundation



public enum Note: Int {
  case note0 = 0, note1, note2, note3, note4, note5, note6, note7, note8, note9, note10, note11
  case c0 = 12, c0Sharp, d0, d0Sharp, e0, f0, f0Sharp, g0, g0Sharp, a0, a0Sharp, b0, c1, c1Sharp, d1, d1Sharp, e1, f1, f1Sharp, g1, g1Sharp, a1, a1Sharp, b1, c2, c2Sharp, d2, d2Sharp, e2, f2, f2Sharp, g2, g2Sharp, a2, a2Sharp, b2, c3, c3Sharp, d3, d3Sharp, e3, f3, f3Sharp, g3, g3Sharp, a3, a3Sharp, b3, c4, c4Sharp, d4, d4Sharp, e4, f4, f4Sharp, g4, g4Sharp, a4, a4Sharp, b4, c5, c5Sharp, d5, d5Sharp, e5, f5, f5Sharp, g5, g5Sharp, a5, a5Sharp, b5, c6, c6Sharp, d6, d6Sharp, e6, f6, f6Sharp, g6, g6Sharp, a6, a6Sharp, b6, c7, c7Sharp, d7, d7Sharp, e7, f7, f7Sharp, g7, g7Sharp, a7, a7Sharp, b7, c8, c8Sharp, d8, d8Sharp, e8, f8, f8Sharp, g8, g8Sharp, a8, a8Sharp, b8, c9, c9Sharp, d9, d9Sharp, e9, f9, f9Sharp, g9
  
  init(_ noteNumber: Int) {
    self.init(rawValue: min(127, max(0, noteNumber)))!
  }
}



extension Note: CustomStringConvertible {
  public var description: String {
    switch self {
    case .note0: return "MIDI Note 0"
    case .note1: return "MIDI Note 1"
    case .note2: return "MIDI Note 2"
    case .note3: return "MIDI Note 3"
    case .note4: return "MIDI Note 4"
    case .note5: return "MIDI Note 5"
    case .note6: return "MIDI Note 6"
    case .note7: return "MIDI Note 7"
    case .note8: return "MIDI Note 8"
    case .note9: return "MIDI Note 9"
    case .note10: return "MIDI Note 10"
    case .note11: return "MIDI Note 11"
    case .c0: return "C0"
    case .c0Sharp: return "C0♯"
    case .d0: return "D0"
    case .d0Sharp: return "D0♯"
    case .e0: return "E0"
    case .f0: return "F0"
    case .f0Sharp: return "F0♯"
    case .g0: return "G0"
    case .g0Sharp: return "G0♯"
    case .a0: return "A0"
    case .a0Sharp: return "A0♯"
    case .b0: return "B0"
    case .c1: return "C1"
    case .c1Sharp: return "C1♯"
    case .d1: return "D1"
    case .d1Sharp: return "D1♯"
    case .e1: return "E1"
    case .f1: return "F1"
    case .f1Sharp: return "F1♯"
    case .g1: return "G1"
    case .g1Sharp: return "G1♯"
    case .a1: return "A1"
    case .a1Sharp: return "A1♯"
    case .b1: return "B1"
    case .c2: return "C2"
    case .c2Sharp: return "C2♯"
    case .d2: return "D2"
    case .d2Sharp: return "D2♯"
    case .e2: return "E2"
    case .f2: return "F2"
    case .f2Sharp: return "F2♯"
    case .g2: return "G2"
    case .g2Sharp: return "G2♯"
    case .a2: return "A2"
    case .a2Sharp: return "A2♯"
    case .b2: return "B2"
    case .c3: return "C3"
    case .c3Sharp: return "C3♯"
    case .d3: return "D3"
    case .d3Sharp: return "D3♯"
    case .e3: return "E3"
    case .f3: return "F3"
    case .f3Sharp: return "F3♯"
    case .g3: return "G3"
    case .g3Sharp: return "G3♯"
    case .a3: return "A3"
    case .a3Sharp: return "A3♯"
    case .b3: return "B3"
    case .c4: return "C4"
    case .c4Sharp: return "C4♯"
    case .d4: return "D4"
    case .d4Sharp: return "D4♯"
    case .e4: return "E4"
    case .f4: return "F4"
    case .f4Sharp: return "F4♯"
    case .g4: return "G4"
    case .g4Sharp: return "G4♯"
    case .a4: return "A4"
    case .a4Sharp: return "A4♯"
    case .b4: return "B4"
    case .c5: return "C5"
    case .c5Sharp: return "C5♯"
    case .d5: return "D5"
    case .d5Sharp: return "D5♯"
    case .e5: return "E5"
    case .f5: return "F5"
    case .f5Sharp: return "F5♯"
    case .g5: return "G5"
    case .g5Sharp: return "G5♯"
    case .a5: return "A5"
    case .a5Sharp: return "A5♯"
    case .b5: return "B5"
    case .c6: return "C6"
    case .c6Sharp: return "C6♯"
    case .d6: return "D6"
    case .d6Sharp: return "D6♯"
    case .e6: return "E6"
    case .f6: return "F6"
    case .f6Sharp: return "F6♯"
    case .g6: return "G6"
    case .g6Sharp: return "G6♯"
    case .a6: return "A6"
    case .a6Sharp: return "A6♯"
    case .b6: return "B6"
    case .c7: return "C7"
    case .c7Sharp: return "C7♯"
    case .d7: return "D7"
    case .d7Sharp: return "D7♯"
    case .e7: return "E7"
    case .f7: return "F7"
    case .f7Sharp: return "F7♯"
    case .g7: return "G7"
    case .g7Sharp: return "G7♯"
    case .a7: return "A7"
    case .a7Sharp: return "A7♯"
    case .b7: return "B7"
    case .c8: return "C8"
    case .c8Sharp: return "C8♯"
    case .d8: return "D8"
    case .d8Sharp: return "D8♯"
    case .e8: return "E8"
    case .f8: return "F8"
    case .f8Sharp: return "F8♯"
    case .g8: return "G8"
    case .g8Sharp: return "G8♯"
    case .a8: return "A8"
    case .a8Sharp: return "A8♯"
    case .b8: return "B8"
    case .c9: return "C9"
    case .c9Sharp: return "C9♯"
    case .d9: return "D9"
    case .d9Sharp: return "D9♯"
    case .e9: return "E9"
    case .f9: return "F9"
    case .f9Sharp: return "F9♯"
    case .g9: return "G9"
    }
  }
}
